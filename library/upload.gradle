/*
 *    Copyright (C) 2016 Bal Sikandar yadav
 *    Copyright (C) 2011 Android Open Source Project
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "com.jfrog.bintray"

def siteUrl = 'https://github.com/PeriyaCC/LocalCrashReporter'
def gitUrl = 'https://github.com/PeriyaCC/LocalCrashReporter.git'

group = "com.github.PeriyaCC"
version = '1.4'

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'

            name 'Crash Reporter'
            description 'Crash Reporter is a handly tool to capture crashes and save in file'

            url siteUrl

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }

            developers {
                developer {
                    id 'PeriyaCC'
                    name 'PeriyaCC'
                    email 'periyanayagam.s@cognitiveclouds.com'
                }
            }

            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")

}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

if (project.rootProject.file("local.properties").exists()) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    bintray {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")

        configurations = ['archives']
        dryRun = false

        pkg {
            repo = "maven"
            name = "LocalCrashReporter"
            websiteUrl = siteUrl
            vcsUrl = gitUrl
            licenses = ["Apache-2.0"]
            publish = true
        }
    }
}
